{{- if .Values.georchestra.webapps.geoserver.enabled -}}
{{- $webapp := .Values.georchestra.webapps.geoserver -}}
{{- $database := .Values.database -}}
{{- $database_secret_geodata_name := printf "%s-database-geodata-secret" (include "georchestra.fullname" .) -}}
{{- $database_secret_datafeeder_name := printf "%s-database-datafeeder-secret" (include "georchestra.fullname" .) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "georchestra.fullname" . }}-geoserver
  labels:
    {{- include "georchestra.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ include "georchestra.fullname" . }}-geoserver
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "georchestra.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ include "georchestra.fullname" . }}-geoserver
  template:
    metadata:
      labels:
        {{- include "georchestra.selectorLabels" . | nindent 8 }}
        org.georchestra.service/name: {{ include "georchestra.fullname" . }}-geoserver
        app.kubernetes.io/component: {{ include "georchestra.fullname" . }}-geoserver

      {{- if $webapp.jetty_monitoring }}
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9103"
        prometheus.io/scrape: "true"
      {{- end }}
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      securityContext:
        fsGroup: 999
      initContainers:
      {{ include "georchestra.bootstrap_georchestra_datadir" . | nindent 6 }}
      - name: prepare-geoserver-webapp
        image: {{ $webapp.docker_image }}
        command:
        - /bin/sh
        - -c
        - cp -r /var/lib/jetty/webapps/geoserver/* /mnt/geoserver_webapp ;
          if [ -f /mnt/georchestra_datadir/geoserver/jetty-env.xml ] ; then
            cp /mnt/georchestra_datadir/geoserver/jetty-env.xml /mnt/geoserver_webapp/WEB-INF/jetty-env.xml ;
          fi ;
        volumeMounts:
          - name: georchestra-datadir
            mountPath: /mnt/georchestra_datadir
          - name: geoserver-webapp
            mountPath: /mnt/geoserver_webapp
      - name: fix-permissions-pvc
        image: busybox:latest
        command: ["sh", "-c", "chown -R 999:999 /mnt/geoserver_datadir /mnt/geoserver_geodata /mnt/geoserver_tiles"]
        volumeMounts:
        - mountPath: /mnt/geoserver_datadir
          name: geoserver-datadir
        - mountPath: /mnt/geoserver_geodata
          name: geoserver-geodata
        - mountPath: /mnt/geoserver_tiles
          name: geoserver-tiles
      containers:
      - name: georchestra-geoserver
        image: {{ $webapp.docker_image }}
        imagePullPolicy: Always
        env:
          {{ if $database.builtin }}
          {{- $database_secret_geodata_name = printf "%s-database-georchestra-secret" (include "georchestra.fullname" .) -}}
          - name: GEODATA_PGHOST
            value: "{{ .Release.Name }}-database"
          - name: GEODATA_PGDATABASE
            value: "geodata"
          {{ else }}
          {{- $database_secret_geodata_name = $database.geodata.auth.existingSecret -}}
          - name: GEODATA_PGHOST
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_geodata_name }}
                  key: host
                  optional: false
          - name: GEODATA_PGDATABASE
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_geodata_name }}
                  key: dbname
                  optional: false
          {{ end }}
          - name: GEODATA_PGPORT
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_geodata_name }}
                  key: port
                  optional: false
          - name: GEODATA_PGUSER
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_geodata_name }}
                  key: user
                  optional: false
          - name: GEODATA_PGPASSWORD
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_geodata_name }}
                  key: password
                  optional: false
          {{ if $database.builtin }}
          {{- $database_secret_datafeeder_name = printf "%s-database-georchestra-secret" (include "georchestra.fullname" .) -}}
          - name: DF_PGHOST
            value: "{{ .Release.Name }}-database"
          - name: DF_PGDATABASE
            value: "datafeeder"
          {{ else }}
          {{- $database_secret_datafeeder_name = $database.datafeeder.auth.existingSecret -}}
          - name: DF_PGHOST
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_datafeeder_name }}
                  key: host
                  optional: false
          - name: DF_PGDATABASE
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_datafeeder_name }}
                  key: dbname
                  optional: false
          {{ end }}
          - name: DF_PGPORT
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_datafeeder_name }}
                  key: port
                  optional: false
          - name: DF_PGUSER
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_datafeeder_name }}
                  key: user
                  optional: false
          - name: DF_PGPASSWORD
            valueFrom:
              secretKeyRef:
                  name: {{ $database_secret_datafeeder_name }}
                  key: password
                  optional: false
          {{- include "georchestra.database-georchestra-envs" . | nindent 10 }}
          {{- if $webapp.extra_environment }}
          {{- $webapp.extra_environment | toYaml | nindent 10 }}
          {{- end }}
        volumeMounts:
          - mountPath: /etc/georchestra
            name: georchestra-datadir
          - mountPath: /mnt/geoserver_geodata
            name: geoserver-geodata
          - mountPath: /mnt/geoserver_datadir
            name: geoserver-datadir
          - mountPath: /var/lib/jetty/webapps/geoserver
            name: geoserver-webapp
          - mountPath: /mnt/geoserver_tiles
            name: geoserver-tiles
          {{- range $webapp.extra_volumes }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
          {{- end }}
        ports:
        - containerPort: 8080
          name: http-proxy
        {{- if $webapp.custom_liveness_probe }}
        {{ $webapp.custom_liveness_probe | toYaml | nindent 8 }}
        {{- else }}
        livenessProbe:
          httpGet:
            path: /geoserver/gwc/service/wmts?SERVICE=WMTS&REQUEST=GetCapabilities
            port: 8080
          periodSeconds: 10
          timeoutSeconds: 5
        {{- end }}
        startupProbe:
          tcpSocket:
            port: 8080
          failureThreshold: 5
          periodSeconds: 40
      {{- if $webapp.jetty_monitoring }}
      - name: jmx-collectd
        image: camptocamp/jmx-collectd:bullseye
        volumeMounts:
        - mountPath: /collectd-template
          name: georchestra-monitoring-cm
        ports:
        - containerPort: 9103
          name: prometheus
        command:
        - /bin/sh
        - -c
        - mkdir /etc/collectd/collectd.conf.d/ ;
          cat /collectd-template/collectd-jmx-jetty.conf | sed "s/localhost/$(hostname)/g" > /etc/collectd/collectd.conf.d/jmx.conf ;
          collectd -f
      {{- end }}
      volumes:
      - name: georchestra-datadir
        emptyDir: {}
      - name: geoserver-webapp
        emptyDir: {}
      - name: geoserver-tiles
        persistentVolumeClaim:
          claimName: {{ include "georchestra.fullname" . }}-geoserver-tiles
      - name: geoserver-geodata
        persistentVolumeClaim:
          claimName: {{ include "georchestra.fullname" . }}-geoserver-geodata
      - name: geoserver-datadir
        persistentVolumeClaim:
          claimName: {{ include "georchestra.fullname" . }}-geoserver-datadir
      {{- range $webapp.extra_volumes }}
      - name: {{ .name }}
        persistentVolumeClaim:
          claimName: {{ .claimName }}
      {{- end }}
      {{- if .Values.georchestra.datadir.git.ssh_secret }}
      - name: ssh-secret
        secret:
          secretName: {{ .Values.georchestra.datadir.git.ssh_secret }}
          defaultMode: 0400
      {{- end }}
      {{- if $webapp.jetty_monitoring }}
      - name: georchestra-monitoring-cm
        configMap:
          name: {{ include "georchestra.fullname" . }}-monitoring-cm
      {{- end }}
      {{- if $webapp.registry_secret }}
      imagePullSecrets:
      - name: {{ $webapp.registry_secret }}
      {{- end }}
{{- end }}
