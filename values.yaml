georchestra:
  webapps:
    # Note: if a secret is needed to fetch the images from a private registry,
    # it can be specified using the "registry_secret" value on each images.
    #
    # If images are publicly available, the parameter should be left commented
    # out.
    #
    analytics:
      enabled: true
      docker_image: georchestra/analytics:latest
      extra_environment: []
      # registry_secret: default
    cas:
      enabled: true
      docker_image: georchestra/cas:latest
      # registry_secret: default
    console:
      enabled: true
      docker_image: georchestra/console:latest
      extra_environment: []
      # registry_secret: default
    datafeeder:
      enabled: true  # won't deploy if datafeeder_frontend is not enable
      docker_image: georchestra/datafeeder:latest
      extra_environment:
      # - name: SMTPHOST
      #   value: "my_smtp_host"
      # - name: SMTPPORT
      #   value: "25"
      # registry_secret: default
      envsubst:
        enabled: true
    datafeeder_frontend:
      # Matches datafeeder/import-xxx.yaml templates in the helm chart
      enabled: true  # won't deploy if datafeeder is not enable
      docker_image: georchestra/datafeeder-frontend:latest
      # registry_secret: default
    extractorapp:
      enabled: false
      docker_image: georchestra/extractorapp:latest
      extra_environment: []
      # registry_secret: default
    geonetwork:
      enabled: true
      docker_image: georchestra/geonetwork:latest
      # the registry secret is only used for the GeoNetwork image
      # registry_secret: default
      jetty_monitoring: false
      extra_environment: []
      # volumes is the deployment-compliant specification of the pod's extra volume
      # It should match with an item from the extra_volumeName.name variable below.
      extra_volumes: []
      # volumeMounts is the deployment-compliant specification of the georchestra-GeoNetwork
      # container extra volume. It should match an item from the extra_volumes.name
      # variable above.
      extra_volumeMounts: []
      ogc_api_records:
        enabled: true
        image: georchestra/gn-cloud-ogc-api-records-service:2021-12-16
        extra_environment: []
        envsubst:
          enabled: true
      elasticsearch:
        resources:
          limits:
            memory: 5120Mi
          requests:
            memory: 5120Mi
        image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
      kibana:
        image: docker.elastic.co/kibana/kibana:7.15.1
      # automatically clean some logs of geonetwork
      housekeeping:
        harvester_logs:
          enabled: false
          schedule: "0 1 * * *"
    geoserver:
      enabled: true
      docker_image: georchestra/geoserver:latest
      jetty_monitoring: false
      extra_environment: []
      # registry_secret: default
    header:
      enabled: true
      docker_image: georchestra/header:latest
      extra_environment: []
      # registry_secret: default
    mapfishapp:
      enabled: false
      docker_image: georchestra/mapfishapp:latest
      extra_environment: []
      # registry_secret: default
    mapstore:
      enabled: true
      docker_image: georchestra/mapstore:latest
      # registry_secret: default
      # no need to put the original command already managed
      command: []
      args: []
    openldap:
      enabled: true
      docker_image: georchestra/ldap:latest
      # registry_secret: default
    proxy:
      enabled: true
      docker_image: georchestra/security-proxy:latest
      jetty_monitoring: false
      extra_environment: []
      # registry_secret: default
      envsubst:
        enabled: true
    gateway:
      enabled: false
      docker_image: georchestra/gateway:latest
  datadir:
    volume:
    - name: georchestra-datadir
      emptyDir: {}
    git:
      url: https://github.com/georchestra/datadir.git
      ref: docker-master
      # ssh_secret: my-private-ssh-key
  # Some cloud providers automatically create & assign PVs to PVCs
  # some other need to create a PV first ; if so, then you can
  # uncomment the `pv_name` entries below.
  storage:
    gn4_es:
      # pv_name: gn4_es_data
      size: 2Gi
    geonetwork_datadir:
      # pv_name: geonetwork_datadir
      size: 2Gi
    geoserver_datadir:
      # pv_name: geoserver_datadir
      size: 256Mi
    geoserver_geodata:
      # pv_name: geoserver_geodata
      size: 2Gi
    mapstore_datadir:
      # pv_name: mapstore_datadir
      size: 256Mi
    openldap_data:
      # pv_name: openldap_data
      size: 256Mi
    openldap_config:
      # pv_name: openldap_config
      size: 1Mi
    geoserver_tiles:
      # pv_name: geoserver_tiles
      size: 2Gi
    # We also might need to specify a custom storageClass
    # Leave it commented if not needed
    # storage_class_name: default
  smtp_smarthost:
    enabled: true
    # mailname: georchestra-127-0-1-1.traefik.me
    # postmaster: postmaster@georchestra-127-0-1-1.traefik.me
    # relay_host: my-external-smtp
    # relay_port: 25
    # relay_username:  aaaa
    # relay_password:  aaaa
    extra_environment: []

fqdn: "georchestra-127-0-1-1.traefik.me"

ingress:
  enabled: true
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts: []
  #  - host: georchestra-127-0-1-1.traefik.me
  tls: []
  # You can import TLS secrets using
  # kubectl create secret tls testsecret --key key.pem --cert cert.pem
  # Then specify the TLS secret name below.
  #  - secretName: testsecret
  #    hosts:
  #      - georchestra-127-0-1-1.traefik.me
  # define a custom incressClassName, like "traefik" or "nginx"
  className: ""

ldap:
  # host: "myldaphost" # uncomment for external host
  port: "389"
  adminPassword: "secret"
  scheme: "ldap"
  baseDn: "dc=georchestra,dc=org"
  usersRdn: "ou=users"
  adminDn: "cn=admin,dc=georchestra,dc=org"
  rolesRdn: "ou=roles"
  orgsRdn: "ou=orgs"

database:
  builtin: true
  image:  # section of parameters for builtin database
    repository: georchestra/database
    tag: latest
  auth:
    database: georchestra
#   existingSecret: mysecret
#   host: georchestra
    password: georchestra
    postgresPassword: georchestra
    port: "5432"
    ssl: false
    username: georchestra
  primary:  # section of parameters for builtin database
    extraVolumeMounts:
      - name: "00-initsql"
        mountPath: "/docker-entrypoint-initdb.d/00_init.sql"
        subPath: "00_init.sql"
    extraVolumes:
      - name: "00-initsql"
        configMap:
          name: "{{ .Release.Name }}-database-init"
    initdb:
      username: georchestra
      password: georchestra
  geodata:
    auth:
      database: geodata
      # existingSecret: mysecret
      host: geodata
      password: geodata
      port: "5432"
      ssl: false
      username: geodata
  datafeeder:
    auth:
      database: datafeeder
      # existingSecret: mysecret
      host: datafeeder
      port: "5432"
      ssl: false
      password: datafeeder
      username: datafeeder
